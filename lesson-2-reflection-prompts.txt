What happens when you initialize a repository? Why do you need to do it?
You tell git that this repository is where most of your development code will reside. This enables git to track changes to it, and treat it as a series of snapshots in the development process.

How is the staging area different from the working directory and the repository?
What value do you think it offers?
It acts like an intermediate stage between the working directory and the repository for changes to go in. You can logically group together certain changes and put them in the staging area for a commit, so that the logical flow of changes is maintained.

How can you use the staging area to make sure you have one commit per logical
change?
The changes you make can be added to the staging area at one go - that is, if you have multiple files due to be changed, all of them can be added to the staging area and committed together so that the change history is maintained, and can be analyzed logically.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
In cases like adding experimental features, having a personal repo for bug fixes, branching for a newer version of the software, etc. Branches would maintain a history of all the logical changes made to the code, so a developer could quickly get to know how the changes got where they were.

How do the diagrams help you visualize the branch structure?
Visualization makes it easier for anyone (even non-developers) to have a quick, intuitive view of the gits. Instead of sifting through lots of text to understand the structure, it is far easier to view the same information in the form of diagrams. Especially the points where new branches are created.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?
